name: Deploy Java Application to Azure

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Azure CLI
        uses: azure/cli@v1
        with:
          azure-version: 'latest'

      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Step 3: Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ./terraform

      # Step 4: Apply Terraform configuration
      - name: Terraform Apply
        working-directory: ./terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform apply -auto-approve

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/my-azure-app:latest .

      # Step 6: Login to Azure Container Registry (ACR)
      - name: Login to ACR
        run: echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 7: Push Docker Image to ACR
      - name: Push Docker Image
        run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/my-azure-app:latest
